<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.zc</groupId>
        <artifactId>learning</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <groupId>com.zc</groupId>
    <artifactId>mybatis-plustest</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>mybatis-plustest</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.zc</groupId>
            <artifactId>zc-common</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.21</version>
        </dependency>

        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.3.1.tmp</version>
        </dependency>

        <!--rabbitmq-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

        <!--knife4j依赖-->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-boot-starter</artifactId>
                <!--在引用时请在maven中央仓库搜索最新版本号-->
                <version>2.0.2</version>
            </dependency>


    </dependencies>

    <build>
        <plugins>
           <!-- <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>-->
            <!--参数解释：
            imageName:镜像的名称，可以通过${project.groupId}/${project.artifactId}:${project.version} 动态制定镜像名称
            当然也可以在前面加上镜像地址，比如127.0.0.1:5000,以声明将构建好的镜像存储在本地
            baseImage: 基础镜像，这里是相当于Dockerfile的FROM java
            resources 下的配置：构建时会生成docker文件夹，这里指生成文件夹的内容来源，包含了mvn clean package 之后的target的文件和生成的jar包 -->
            <!--<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.1</version>
                &lt;!&ndash; 将插件绑定在某个phase执行 &ndash;&gt;
                <executions>
                    <execution>
                        <id>build-image</id>
                        &lt;!&ndash; 用户只需执行mvn package ，就会自动执行mvn docker:build &ndash;&gt;
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    &lt;!&ndash; 指定生成的镜像名 &ndash;&gt;
                    <imageName>${project.groupId}/${project.artifactId}:${project.version}</imageName>
                    &lt;!&ndash; 指定标签 &ndash;&gt;
                    <imageTags>
                        <imageTag>${project.version}</imageTag>
                    </imageTags>
                    &lt;!&ndash; 指定 Dockerfile 路径 &ndash;&gt;
                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
                    &lt;!&ndash; 指定远程 docker api地址 &ndash;&gt;
                    <dockerHost>http://129.28.158.68:2375</dockerHost>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            &lt;!&ndash; jar包所在的路径此处配置的对应target目录 &ndash;&gt;
                            <directory>${project.build.directory}</directory>
                            &lt;!&ndash; 需要包含的jar包,这里对应的是Dockerfile中添加的文件名　&ndash;&gt;
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>-->
        </plugins>
    </build>

</project>
